# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: build-and-deploy-docker-dev

on:
  push:
    branches:
      - dev
jobs:
  build-and-push-to-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Build with Maven
        run: mvn clean package javadoc:aggregate
      - name: Set env variables for Docker builds
        run: |
          echo "::set-env name=MVN_VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
          echo "::set-env name=DOCKERHUB_APACHE_REPO::apachestreampipes"
          echo "::set-env name=BASE_IMG_JRE_DEFAULT::adoptopenjdk/openjdk8-openj9:alpine-slim"
          echo "::set-env name=BASE_IMG_JRE_ARM32V7::arm32v7/openjdk:11-jre-slim"
          echo "::set-env name=BASE_IMG_JRE_ARM64V8::arm64v8/openjdk:11-jre-slim"
          echo "::set-env name=BASE_IMG_NGINX_DEFAULT::nginx"
          echo "::set-env name=BASE_IMG_NGINX_ARM32V7::arm32v7/nginx"
          echo "::set-env name=BASE_IMG_NGINX_ARM64V8::arm64v8/nginx"
      - name: Download and distribute qemu for multi-arch builds
        run: |
          wget https://github.com/multiarch/qemu-user-static/releases/download/v4.0.0/qemu-arm-static
          wget https://github.com/multiarch/qemu-user-static/releases/download/v4.0.0/qemu-aarch64-static
          chmod 554 qemu-arm-static qemu-aarch64-static
          echo "./streampipes-backend/ ./streampipes-connect-container-master/ ./ui" | xargs -n 1 cp -v qemu-*
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin
      - name: Build and Push Docker Backend Image
        env:
          IMG_NAME_DEFAULT: $DOCKERHUB_APACHE_REPO/backend:$MVN_VERSION
          IMG_NAME_AMD64: $DOCKERHUB_APACHE_REPO/backend:amd64-$MVN_VERSION
          IMG_NAME_ARM32V7: $DOCKERHUB_APACHE_REPO/backend:arm32v7-$MVN_VERSION
          IMG_NAME_ARM64V8: $DOCKERHUB_APACHE_REPO/backend:arm64v8-$MVN_VERSION
          DFILE_DIR: streampipes-backend
        run: |
          docker build --pull --build-arg BASE_IMG=$BASE_IMG_JRE_DEFAULT -t $IMG_NAME_DEFAULT -t $IMG_NAME_AMD64 -f ./$DFILE_DIR/Dockerfile ./$DFILE_DIR
          docker build --pull --build-arg BASE_IMG=$BASE_IMG_JRE_ARM32V7 --build-arg QEMU=qemu-arm-static -t $IMG_NAME_ARM32V7 -f ./$DFILE_DIR/arm.Dockerfile ./$DFILE_DIR
          docker build --pull --build-arg BASE_IMG=$BASE_IMG_JRE_ARM64V8 --build-arg QEMU=qemu-aarch64-static -t $IMG_NAME_ARM64V8 -f ./$DFILE_DIR/aarch64.Dockerfile ./$DFILE_DIR
          docker push $IMG_NAME_DEFAULT
          docker push $IMG_NAME_AMD64
          docker push $IMG_NAME_ARM32V7
          docker push $IMG_NAME_ARM64V8
      - name: Build and Push Docker Connect Image
        env:
          IMG_NAME_DEFAULT: $DOCKERHUB_APACHE_REPO/streampipes-connect-container:$MVN_VERSION
          IMG_NAME_AMD64: $DOCKERHUB_APACHE_REPO/streampipes-connect-container:amd64-$MVN_VERSION
          IMG_NAME_ARM32V7: $DOCKERHUB_APACHE_REPO/streampipes-connect-container:arm32v7-$MVN_VERSION
          IMG_NAME_ARM64V8: $DOCKERHUB_APACHE_REPO/streampipes-connect-container:arm64v8-$MVN_VERSION
          DFILE_DIR: streampipes-connect-container-master
        run: |
          docker build --pull --build-arg BASE_IMG=$BASE_IMG_JRE_DEFAULT -t $IMG_NAME_DEFAULT -t $IMG_NAME_AMD64 -f ./$DFILE_DIR/Dockerfile ./$DFILE_DIR
          docker build --pull --build-arg BASE_IMG=$BASE_IMG_JRE_ARM32V7 --build-arg QEMU=qemu-arm-static -t $IMG_NAME_ARM32V7 -f ./$DFILE_DIR/arm.Dockerfile ./$DFILE_DIR
          docker build --pull --build-arg BASE_IMG=$BASE_IMG_JRE_ARM64V8 --build-arg QEMU=qemu-aarch64-static -t $IMG_NAME_ARM64V8 -f ./$DFILE_DIR/aarch64.Dockerfile ./$DFILE_DIR
          docker push $IMG_NAME_DEFAULT
          docker push $IMG_NAME_AMD64
          docker push $IMG_NAME_ARM32V7
          docker push $IMG_NAME_ARM64V8
      - name: Build UI
        working-directory: ./ui
        run: |
          NODE_PATH=/cache/node_modules
          NODE_OPTIONS=--max_old_space_size=6096
          npm install --unsafe-perm
          npm run build
      - name: Build and Push Docker UI Image
        env:
          IMG_NAME_DEFAULT: $DOCKERHUB_APACHE_REPO/ui:$MVN_VERSION
          IMG_NAME_AMD64: $DOCKERHUB_APACHE_REPO/ui:amd64-$MVN_VERSION
          IMG_NAME_ARM32V7: $DOCKERHUB_APACHE_REPO/ui:arm32v7-$MVN_VERSION
          IMG_NAME_ARM64V8: $DOCKERHUB_APACHE_REPO/ui:arm64v8-$MVN_VERSION
          DFILE_DIR: ui
        run: |
          docker build --no-cache --pull --build-arg BASE_IMG=$BASE_IMG_JRE_DEFAULT -t $IMG_NAME_DEFAULT -t $IMG_NAME_AMD64 -f ./$DFILE_DIR/Dockerfile ./$DFILE_DIR
          docker build --no-cache --pull --build-arg BASE_IMG=$BASE_IMG_JRE_ARM32V7 --build-arg QEMU=qemu-arm-static -t $IMG_NAME_ARM32V7 -f ./$DFILE_DIR/arm.Dockerfile ./$DFILE_DIR
          docker build --no-cache --pull --build-arg BASE_IMG=$BASE_IMG_JRE_ARM64V8 --build-arg QEMU=qemu-aarch64-static -t $IMG_NAME_ARM64V8 -f ./$DFILE_DIR/aarch64.Dockerfile ./$DFILE_DIR
          docker push $IMG_NAME_DEFAULT
          docker push $IMG_NAME_AMD64
          docker push $IMG_NAME_ARM32V7
          docker push $IMG_NAME_ARM64V8
