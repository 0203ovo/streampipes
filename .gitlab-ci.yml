# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

variables:
  IMAGE_NAME: $REGISTRY_HOST/$CI_PROJECT_PATH
  HARBOR_IMAGE_NAME: $HARBOR_REGISTRY_HOST/$CI_PROJECT_PATH
  MAVEN_CLI_OPTS: -DskipTests --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true
  GIT_STRATEGY: clone
  DOCKER_CLI_EXPERIMENTAL: enabled
  BASE_IMAGE_AMD: adoptopenjdk/openjdk8-openj9:alpine-slim
  BASE_IMAGE_ARM32v7: arm32v7/openjdk:11-jre-slim
  BASE_IMAGE_ARM64v8: arm64v8/openjdk:11-jre-slim
  BASE_NGINX_AMD64: nginx
  BASE_NGINX_ARM32v7: arm32v7/nginx
  BASE_NGINX_ARM64v8: arm64v8/nginx

stages:
  - build
  - github
  - docker
  - deploy
  - release
  - docker-hub

    #before_script:
    #- echo "$MAVEN_CREDENTIALS" > /root/.m2/settings.xml
    #- git remote set-url origin $GIT_REPO_ORIGIN/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME.git

build:
  image: maven:3-jdk-8
  stage: build
  script:
    - echo "$GPG_PRIVATE_KEY" | gpg --batch --import --passphrase "$GPG_PASSPHRASE"
    - echo "$MAVEN_CREDENTIALS" > /root/.m2/settings.xml
    - mvn clean package javadoc:aggregate
   # - mvn clean package javadoc:aggregate
    - export MVN_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep -v '\[')
    - "echo $MVN_VERSION >> ./target/mvn_version"
  artifacts:
    paths:
      - ./streampipes-backend/target/streampipes-backend.jar
      - ./streampipes-connect-container-master/target/streampipes-connect-container-master.jar
      - ./target/site/apidocs/**
      - ./target/mvn_version
    expire_in:  1 week
  except:
      - /release-.*$/

build-ui:
  image: node:8-alpine
  stage: build
  script:
    - cd ui
    - export NODE_PATH=/cache/node_modules
    - export NODE_OPTIONS=--max_old_space_size=4096
    - npm install --unsafe-perm
    - npm run build
  artifacts:
    paths:
      - ui/dist/assets/css/
      - ui/dist/assets/img/
      - ui/dist/assets/lib/
      - ui/dist/assets/templates/
      - ui/dist/assets/fonts/
      - ui/dist/index.html
      - ui/dist/main.bundle.js
      - ui/dist/main.bundle.js.gz
      - ui/dist/polyfills.bundle.js
      - ui/dist/polyfills.bundle.js.gz
      - ui/dist/style.bundle.css
      - ui/dist/style.bundle.css.gz
      - ui/dist/style.bundle.js
      - ui/dist/style.bundle.js.gz
      - ui/dist/style.css
      - ui/dist/style.css.gz
    expire_in: 1 hour
  only:
    - dev
    - multiarch
      
github:
  image: maven:3-jdk-8
  stage: github
  script:
    - git config --global user.email 'zehnder@fzi.de'
    - git config --global user.name 'zehnder'
    - git checkout $CI_COMMIT_REF_NAME
    - git pull
    - git remote add github https://$GITHUB_TOKEN:x-oauth-basic@github.com/streampipes/streampipes.git
    - git push github $CI_COMMIT_REF_NAME
  only:
    - dev
    - master

docker-ui:
  image: docker:19.03.5
  stage: docker
  dependencies:
    - build
    - build-ui
  script:
    - export MVN_VERSION=$(cat ./target/mvn_version)
    - apk update
    - apk add curl
    - apk add unzip
    #    - 'curl -k -f -L -H "PRIVATE-TOKEN: ${API_KEY}" -o javadoc.zip "https://ipe-wim-gitlab.fzi.de/streampipes/ce/-/jobs/artifacts/dev/download?job=build"'
    #    - unzip javadoc.zip
    #    - mkdir javadoc && mv target/site/apidocs/* ./javadoc
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $REGISTRY_HOST
    # Build AMD64
    - docker build --no-cache --pull --build-arg BASE_IMAGE=$BASE_NGINX_AMD64
      -t $IMAGE_NAME/ui:amd64 -t $IMAGE_NAME/ui:amd64-$MVN_VERSION
      -f ./ui/Dockerfile ./ui
    # Build ARMv7
    # Download qemu static and make it executable so it can be used during the docker build phase
    - wget https://github.com/multiarch/qemu-user-static/releases/download/v4.0.0/qemu-arm-static -P ./ui
    - chmod 554 ./ui/qemu-arm-static
    - docker build --no-cache --pull --build-arg BASE_IMAGE=$BASE_NGINX_ARM32v7
      -t $IMAGE_NAME/ui:arm32v7 -t $IMAGE_NAME/ui:arm32v7-$MVN_VERSION
      -f ./ui/Dockerfile.arm ./ui
    - docker build --no-cache --pull --build-arg BASE_IMAGE=$BASE_NGINX_ARM64v8
      -t $IMAGE_NAME/ui:arm64v8 -t $IMAGE_NAME/ui:arm64v8-$MVN_VERSION
      -f ./ui/Dockerfile.arm ./ui
    # Push Docker images: AMD64, ARMv7, ARMv8
    - docker push $IMAGE_NAME/ui:amd64-$MVN_VERSION
    - docker push $IMAGE_NAME/ui:amd64
    - docker push $IMAGE_NAME/ui:arm32v7-$MVN_VERSION
    - docker push $IMAGE_NAME/ui:arm32v7
    - docker push $IMAGE_NAME/ui:arm64v8-$MVN_VERSION
    - docker push $IMAGE_NAME/ui:arm64v8
    # Create Docker manifest
    - docker manifest create $IMAGE_NAME/ui:$MVN_VERSION
      $IMAGE_NAME/ui:amd64-$MVN_VERSION
      $IMAGE_NAME/ui:arm32v7-$MVN_VERSION
      $IMAGE_NAME/ui:arm64v8-$MVN_VERSION
    - docker manifest annotate $IMAGE_NAME/ui:$MVN_VERSION $IMAGE_NAME/ui:arm32v7-$MVN_VERSION --os linux --arch arm
    - docker manifest annotate $IMAGE_NAME/ui:$MVN_VERSION $IMAGE_NAME/ui:arm64v8-$MVN_VERSION --os linux --arch arm64
    - docker manifest push $IMAGE_NAME/ui:$MVN_VERSION
#    - docker login -u zehnder -p $HARBOR_PASSWORD ipe-harbor.fzi.de
#    # Build AMD64
#    - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_AMD
#      -t $IMAGE_NAME/backend:amd64 -t $IMAGE_NAME/backend:amd64-$MVN_VERSION
#      -t $HARBOR_IMAGE_NAME/backend:amd64 -t $HARBOR_IMAGE_NAME/backend:amd64-$MVN_VERSION
#      -f ./streampipes-backend/Dockerfile ./streampipes-backend
#    # Build ARMv7
#    # Download qemu static and make it executable so it can be used during the docker build phase
#    - wget https://github.com/multiarch/qemu-user-static/releases/download/v4.0.0/qemu-arm-static -P ./streampipes-backend
#    - chmod 554 ./streampipes-backend/qemu-arm-static
#    - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM32v7
#      -t $IMAGE_NAME/backend:arm32v7 -t $IMAGE_NAME/backend:arm32v7-$MVN_VERSION
#      -t $HARBOR_IMAGE_NAME/backend:arm32v7 -t $HARBOR_IMAGE_NAME/backend:arm32v7-$MVN_VERSION
#      -f ./streampipes-backend/Dockerfile.arm ./streampipes-backend
#    - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM64v8
#      -t $IMAGE_NAME/backend:arm64v8 -t $IMAGE_NAME/backend:arm64v8-$MVN_VERSION
#      -t $HARBOR_IMAGE_NAME/backend:arm64v8 -t $HARBOR_IMAGE_NAME/backend:arm64v8-$MVN_VERSION
#      -f ./streampipes-backend/Dockerfile.arm ./streampipes-backend
#    # Push Docker images
#    # Push AMD64
#    - docker push $IMAGE_NAME/backend:amd64-$MVN_VERSION
#    - docker push $IMAGE_NAME/backend:amd64
#    - docker push $HARBOR_IMAGE_NAME/backend:amd64-$MVN_VERSION
#    - docker push $HARBOR_IMAGE_NAME/backend:amd64
#    # Push ARMv7
#    - docker push $IMAGE_NAME/backend:arm32v7-$MVN_VERSION
#    - docker push $IMAGE_NAME/backend:arm32v7
#    - docker push $HARBOR_IMAGE_NAME/backend:arm32v7-$MVN_VERSION
#    - docker push $HARBOR_IMAGE_NAME/backend:arm32v7
#    # Push ARMv8
#    - docker push $IMAGE_NAME/backend:arm64v8-$MVN_VERSION
#    - docker push $IMAGE_NAME/backend:arm64v8
#    - docker push $HARBOR_IMAGE_NAME/backend:arm64v8-$MVN_VERSION
#    - docker push $HARBOR_IMAGE_NAME/backend:arm64v8
#    # Create Docker manifest
#    - docker manifest create $IMAGE_NAME/backend:$MVN_VERSION
#      $IMAGE_NAME/backend:amd64-$MVN_VERSION
#      $IMAGE_NAME/backend:arm32v7-$MVN_VERSION
#      $IMAGE_NAME/backend:arm64v8-$MVN_VERSION
#    - docker manifest annotate $IMAGE_NAME/backend:$MVN_VERSION $IMAGE_NAME/backend:arm32v7-$MVN_VERSION --os linux --arch arm
#    - docker manifest annotate $IMAGE_NAME/backend:$MVN_VERSION $IMAGE_NAME/backend:arm64v8-$MVN_VERSION --os linux --arch arm64
#    - docker manifest push $IMAGE_NAME/backend:$MVN_VERSION

docker-backend:
   image: docker:19.03.5
   stage: docker
   dependencies: 
     - build
   script: 
     - export MVN_VERSION=$(cat ./target/mvn_version)
     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $REGISTRY_HOST
     # Build AMD64
     - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_AMD
       -t $IMAGE_NAME/backend:amd64 -t $IMAGE_NAME/backend:amd64-$MVN_VERSION
       -f ./streampipes-backend/Dockerfile ./streampipes-backend
     # Build ARMv7
     # Download qemu static and make it executable so it can be used during the docker build phase
     - wget https://github.com/multiarch/qemu-user-static/releases/download/v4.0.0/qemu-arm-static -P ./streampipes-backend
     - chmod 554 ./streampipes-backend/qemu-arm-static
     - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM32v7
       -t $IMAGE_NAME/backend:arm32v7 -t $IMAGE_NAME/backend:arm32v7-$MVN_VERSION
       -f ./streampipes-backend/Dockerfile.arm ./streampipes-backend
     - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM64v8
       -t $IMAGE_NAME/backend:arm64v8 -t $IMAGE_NAME/backend:arm64v8-$MVN_VERSION
       -f ./streampipes-backend/Dockerfile.arm ./streampipes-backend
     # Push Docker images: AMD64, ARMv7, ARMv8
     - docker push $IMAGE_NAME/backend:amd64-$MVN_VERSION
     - docker push $IMAGE_NAME/backend:amd64
     - docker push $IMAGE_NAME/backend:arm32v7-$MVN_VERSION
     - docker push $IMAGE_NAME/backend:arm32v7
     - docker push $IMAGE_NAME/backend:arm64v8-$MVN_VERSION
     - docker push $IMAGE_NAME/backend:arm64v8
     # Create Docker manifest
     - docker manifest create $IMAGE_NAME/backend:$MVN_VERSION
       $IMAGE_NAME/backend:amd64-$MVN_VERSION
       $IMAGE_NAME/backend:arm32v7-$MVN_VERSION
       $IMAGE_NAME/backend:arm64v8-$MVN_VERSION
     - docker manifest annotate $IMAGE_NAME/backend:$MVN_VERSION $IMAGE_NAME/backend:arm32v7-$MVN_VERSION --os linux --arch arm
     - docker manifest annotate $IMAGE_NAME/backend:$MVN_VERSION $IMAGE_NAME/backend:arm64v8-$MVN_VERSION --os linux --arch arm64
     - docker manifest push $IMAGE_NAME/backend:$MVN_VERSION
  #    - docker login -u zehnder -p $HARBOR_PASSWORD ipe-harbor.fzi.de
  #    # Build AMD64
  #    - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_AMD
  #      -t $IMAGE_NAME/backend:amd64 -t $IMAGE_NAME/backend:amd64-$MVN_VERSION
  #      -t $HARBOR_IMAGE_NAME/backend:amd64 -t $HARBOR_IMAGE_NAME/backend:amd64-$MVN_VERSION
  #      -f ./streampipes-backend/Dockerfile ./streampipes-backend
  #    # Build ARMv7
  #    # Download qemu static and make it executable so it can be used during the docker build phase
  #    - wget https://github.com/multiarch/qemu-user-static/releases/download/v4.0.0/qemu-arm-static -P ./streampipes-backend
  #    - chmod 554 ./streampipes-backend/qemu-arm-static
  #    - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM32v7
  #      -t $IMAGE_NAME/backend:arm32v7 -t $IMAGE_NAME/backend:arm32v7-$MVN_VERSION
  #      -t $HARBOR_IMAGE_NAME/backend:arm32v7 -t $HARBOR_IMAGE_NAME/backend:arm32v7-$MVN_VERSION
  #      -f ./streampipes-backend/Dockerfile.arm ./streampipes-backend
  #    - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM64v8
  #      -t $IMAGE_NAME/backend:arm64v8 -t $IMAGE_NAME/backend:arm64v8-$MVN_VERSION
  #      -t $HARBOR_IMAGE_NAME/backend:arm64v8 -t $HARBOR_IMAGE_NAME/backend:arm64v8-$MVN_VERSION
  #      -f ./streampipes-backend/Dockerfile.arm ./streampipes-backend
  #    # Push Docker images
  #    # Push AMD64
  #    - docker push $IMAGE_NAME/backend:amd64-$MVN_VERSION
  #    - docker push $IMAGE_NAME/backend:amd64
  #    - docker push $HARBOR_IMAGE_NAME/backend:amd64-$MVN_VERSION
  #    - docker push $HARBOR_IMAGE_NAME/backend:amd64
  #    # Push ARMv7
  #    - docker push $IMAGE_NAME/backend:arm32v7-$MVN_VERSION
  #    - docker push $IMAGE_NAME/backend:arm32v7
  #    - docker push $HARBOR_IMAGE_NAME/backend:arm32v7-$MVN_VERSION
  #    - docker push $HARBOR_IMAGE_NAME/backend:arm32v7
  #    # Push ARMv8
  #    - docker push $IMAGE_NAME/backend:arm64v8-$MVN_VERSION
  #    - docker push $IMAGE_NAME/backend:arm64v8
  #    - docker push $HARBOR_IMAGE_NAME/backend:arm64v8-$MVN_VERSION
  #    - docker push $HARBOR_IMAGE_NAME/backend:arm64v8
  #    # Create Docker manifest
  #    - docker manifest create $IMAGE_NAME/backend:$MVN_VERSION
  #      $IMAGE_NAME/backend:amd64-$MVN_VERSION
  #      $IMAGE_NAME/backend:arm32v7-$MVN_VERSION
  #      $IMAGE_NAME/backend:arm64v8-$MVN_VERSION
  #    - docker manifest annotate $IMAGE_NAME/backend:$MVN_VERSION $IMAGE_NAME/backend:arm32v7-$MVN_VERSION --os linux --arch arm
  #    - docker manifest annotate $IMAGE_NAME/backend:$MVN_VERSION $IMAGE_NAME/backend:arm64v8-$MVN_VERSION --os linux --arch arm64
  #    - docker manifest push $IMAGE_NAME/backend:$MVN_VERSION
   only:
     - dev
     - multiarch

docker-connect-container:
   image: docker:19.03.5
   stage: docker
   dependencies:
     - build
   script:
     - export MVN_VERSION=$(cat ./target/mvn_version)
     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $REGISTRY_HOST
     # Build AMD64
     - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_AMD
       -t $IMAGE_NAME/streampipes-connect-container:amd64 -t $IMAGE_NAME/streampipes-connect-container:amd64-$MVN_VERSION
       -f ./streampipes-connect-container-master/Dockerfile ./streampipes-connect-container-master
     # Build ARMv7
     # Download qemu static and make it executable so it can be used during the docker build phase
     - wget https://github.com/multiarch/qemu-user-static/releases/download/v4.0.0/qemu-arm-static -P ./streampipes-connect-container-master
     - chmod 554 ./streampipes-connect-container-master/qemu-arm-static
     - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM32v7
       -t $IMAGE_NAME/streampipes-connect-container:arm32v7 -t $IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION
       -f ./streampipes-connect-container-master/Dockerfile.arm ./streampipes-connect-container-master
     - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM64v8
       -t $IMAGE_NAME/streampipes-connect-container:arm64v8 -t $IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION
       -f ./streampipes-connect-container-master/Dockerfile.arm ./streampipes-connect-container-master
     # Push Docker images: AMD64, ARMv7, ARMv8
     - docker push $IMAGE_NAME/streampipes-connect-container:amd64-$MVN_VERSION
     - docker push $IMAGE_NAME/streampipes-connect-container:amd64
     - docker push $IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION
     - docker push $IMAGE_NAME/streampipes-connect-container:arm32v7
     - docker push $IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION
     - docker push $IMAGE_NAME/streampipes-connect-container:arm64v8
     # Create Docker manifest
     - docker manifest create $IMAGE_NAME/streampipes-connect-container:$MVN_VERSION
       $IMAGE_NAME/streampipes-connect-container:amd64-$MVN_VERSION
       $IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION
       $IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION
     - docker manifest annotate $IMAGE_NAME/streampipes-connect-container:$MVN_VERSION $IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION --os linux --arch arm
     - docker manifest annotate $IMAGE_NAME/streampipes-connect-container:$MVN_VERSION $IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION --os linux --arch arm64
     - docker manifest push $IMAGE_NAME/streampipes-connect-container:$MVN_VERSION
  #    - docker login -u zehnder -p $HARBOR_PASSWORD ipe-harbor.fzi.de
  #    # Build AMD64
  #    - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_AMD
  #      -t $IMAGE_NAME/streampipes-connect-container:amd64 -t $IMAGE_NAME/streampipes-connect-container:amd64-$MVN_VERSION
  #      -t $HARBOR_IMAGE_NAME/streampipes-connect-container:amd64 -t $HARBOR_IMAGE_NAME/streampipes-connect-container:amd64-$MVN_VERSION
  #      -f ./streampipes-connect-container-master/Dockerfile ./streampipes-connect-container-master
  #    # Build ARMv7
  #    # Download qemu static and make it executable so it can be used during the docker build phase
  #    - wget https://github.com/multiarch/qemu-user-static/releases/download/v4.0.0/qemu-arm-static -P ./streampipes-connect-container-master
  #    - chmod 554 ./streampipes-connect-container-master/qemu-arm-static
  #    - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM32v7
  #      -t $IMAGE_NAME/streampipes-connect-container:arm32v7 -t $IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION
  #      -t $HARBOR_IMAGE_NAME/streampipes-connect-container:arm32v7 -t $HARBOR_IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION
  #      -f ./streampipes-connect-container-master/Dockerfile.arm ./streampipes-connect-container-master
  #    - docker build --pull --build-arg BASE_IMAGE=$BASE_IMAGE_ARM64v8
  #      -t $IMAGE_NAME/streampipes-connect-container:arm64v8 -t $IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION
  #      -t $HARBOR_IMAGE_NAME/streampipes-connect-container:arm64v8 -t $HARBOR_IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION
  #      -f ./streampipes-connect-container-master/Dockerfile.arm ./streampipes-connect-container-master
  #    # Push Docker images
  #    # Push AMD64
  #    - docker push $IMAGE_NAME/streampipes-connect-container:amd64-$MVN_VERSION
  #    - docker push $IMAGE_NAME/streampipes-connect-container:amd64
  #    - docker push $HARBOR_IMAGE_NAME/streampipes-connect-container:amd64-$MVN_VERSION
  #    - docker push $HARBOR_IMAGE_NAME/streampipes-connect-container:amd64
  #    # Push ARMv7
  #    - docker push $IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION
  #    - docker push $IMAGE_NAME/streampipes-connect-container:arm32v7
  #    - docker push $HARBOR_IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION
  #    - docker push $HARBOR_IMAGE_NAME/streampipes-connect-container:arm32v7
  #    # Push ARMv8
  #    - docker push $IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION
  #    - docker push $IMAGE_NAME/streampipes-connect-container:arm64v8
  #    - docker push $HARBOR_IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION
  #    - docker push $HARBOR_IMAGE_NAME/streampipes-connect-container:arm64v8
  #    # Create Docker manifest
  #    - docker manifest create $IMAGE_NAME/streampipes-connect-container:$MVN_VERSION
  #      $IMAGE_NAME/streampipes-connect-container:amd64-$MVN_VERSION
  #      $IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION
  #      $IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION
  #    - docker manifest annotate $IMAGE_NAME/streampipes-connect-container:$MVN_VERSION $IMAGE_NAME/streampipes-connect-container:arm32v7-$MVN_VERSION --os linux --arch arm
  #    - docker manifest annotate $IMAGE_NAME/streampipes-connect-container:$MVN_VERSION $IMAGE_NAME/streampipes-connect-container:arm64v8-$MVN_VERSION --os linux --arch arm64
  #    - docker manifest push $IMAGE_NAME/streampipes-connect-container:$MVN_VERSION
   only:
     - dev
     - multiarch

deploy:
  image: maven:3-jdk-8
  stage: deploy
  script:
    - echo "$GPG_PRIVATE_KEY" | gpg --batch --import --passphrase "$GPG_PASSPHRASE"
    - echo "$MAVEN_CREDENTIALS" > /root/.m2/settings.xml
    - mvn deploy -DskipTests
  only:
    - dev
  artifacts:
    paths:
      - ./**/*.jar
    expire_in:  1 hour
    
#deploy to test:
#  image: maven:3-jdk-8
#  stage: deploy
#  before_script:
#    - mkdir -p ~/.ssh
#    - echo -e "$TESTSERVER_SSH" > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#  script:
#    - ssh "$TESTSERVER_USER"@"$TESTSERVER_HOSTNAME" "cd ~/streampipes-cd && docker-compose pull backend && docker-compose up -d"
#  environment:
#    name: test
#    url: http://$TESTSERVER_HOSTNAME
#  only:
#    - dev


start release:
  image: maven:3-jdk-8
  stage: release
  script:
    - echo "$MAVEN_CREDENTIALS" > /root/.m2/settings.xml
    - git remote set-url origin $GIT_REPO_ORIGIN/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME.git
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH")
    - mkdir ~/.ssh
    - touch ~/.ssh/known_hosts
    - ssh-keyscan -p 2222 -t rsa ipe-wim-gitlab.fzi.de > ~/.ssh/known_hosts
    - git config --global user.email 'zehnder@fzi.de'
    - git config --global user.name 'zehnder'
    - git fetch
    - git checkout master
    - git checkout dev
    - mvn -B jgitflow:release-start $MAVEN_CLI_OPTS -Drelease=true
    - git push origin --all
  only:
    - dev
  when: manual

finish release:
  image: maven:3-jdk-8
  stage: release
  script:
    - export MVN_VERSION=$(cat ./target/mvn_version)
    - echo "$GPG_PRIVATE_KEY" | gpg --batch --import --passphrase "$GPG_PASSPHRASE"
    - echo "$MAVEN_CREDENTIALS" > /root/.m2/settings.xml
    - git remote set-url origin $GIT_REPO_ORIGIN/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME.git
    - git remote add github https://$GITHUB_TOKEN:x-oauth-basic@github.com/streampipes/streampipes.git
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH")
    - mkdir ~/.ssh
    - touch ~/.ssh/known_hosts
    - ssh-keyscan -p 2222 -t rsa ipe-wim-gitlab.fzi.de > ~/.ssh/known_hosts
    - git config --global user.email 'zehnder@fzi.de'
    - git config --global user.name 'zehnder'
    - git checkout master
    - git checkout dev
    - git checkout $CI_BUILD_REF_NAME
    - mvn -B jgitflow:release-finish $MAVEN_CLI_OPTS -Drelease=true
    - git push origin --all
    - git push origin --tags
    - git checkout master
    - git push github master
    - git push github $MVN_VERSION
    - git checkout dev
    - git push github dev
  when: manual
  except:
    - master

docker hub:
  image: docker:17.06.0-ce
  stage: docker-hub
  script:
    - export MVN_VERSION=$(cat ./target/mvn_version)
    - docker login -u streampipesbuild -p $DOCKER_HUB_USER_PWD
    - docker build --pull -t streampipes/backend:$MVN_VERSION ./streampipes-backend/
    - docker push streampipes/backend:$MVN_VERSION
    - docker build --pull -t streampipes/backend ./streampipes-backend/
    - docker push streampipes/backend
    - docker build --pull -t streampipes/streampipes-connect-container:latest -t streampipes/streampipes-connect-container:$MVN_VERSION ./streampipes-connect-container-master/
    - docker push streampipes/streampipes-connect-container:$MVN_VERSION
    - docker push streampipes/streampipes-connect-container:latest
  when: manual
  only:
    - master




