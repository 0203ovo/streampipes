package de.fzi.cep.sepa.webapp.examples;

import java.util.ArrayList;
import java.util.List;

import de.fzi.cep.sepa.mock.Domain;
import de.fzi.cep.sepa.mock.SEPAMock;
import de.fzi.cep.sepa.mock.SEPMock;
import de.fzi.cep.sepa.mock.SourceMock;
import de.fzi.cep.sepa.mock.examples.SEPAFactory;
import de.fzi.cep.sepa.mock.examples.SEPFactory;
import de.fzi.cep.sepa.mock.examples.SourceFactory;
import de.fzi.sepa.mock.manager.SEPAManager;

public class DemoDataGenerator {

	public static void generateDemoData()
	{
		SEPAManager manager = SEPAManager.INSTANCE;
		
		//generate event sources
		//proasense
		List<SourceMock> sources = new ArrayList<SourceMock>();
		SourceMock ddm = SourceFactory.generateSourceMock("DDM", "produces events generated by the Derrick Drilling machine", createDomainList(Domain.DOMAIN_PROASENSE));
		SourceMock ibop = SourceFactory.generateSourceMock("IBOP", "internal blowout preventer", createDomainList(Domain.DOMAIN_PROASENSE));
		SourceMock weather = SourceFactory.generateSourceMock("Weather", "produces weather information at a given location", createDomainList(Domain.DOMAIN_PROASENSE, Domain.DOMAIN_PERSONAL_ASSISTANT));
		SourceMock drillBit = SourceFactory.generateSourceMock("drillBit", "produces events generated by the drill string", createDomainList(Domain.DOMAIN_PROASENSE));
		
		//personalassistant
		SourceMock mobilePhone = SourceFactory.generateSourceMock("Mobile Phone", "produces events generated by a mobile phone", createDomainList(Domain.DOMAIN_PERSONAL_ASSISTANT));
		SourceMock twitter = SourceFactory.generateSourceMock("Twitter", "produces tweets written by twitter users", createDomainList(Domain.DOMAIN_PERSONAL_ASSISTANT));
		
		
		sources.add(ddm);
		sources.add(ibop);
		sources.add(weather);
		sources.add(drillBit);
		sources.add(mobilePhone);
		sources.add(twitter);
		
		manager.setStoredSources(sources);
		
		
		//generate event producers
		List<SEPMock> seps = new ArrayList<SEPMock>();
		
		SEPMock speedShaft = SEPFactory.generateSEPMock("DDM Speed Shaft", "", ddm.getElementId());
		SEPMock torque = SEPFactory.generateSEPMock("DDM Torque", "", ddm.getElementId());
		SEPMock hookLoad = SEPFactory.generateSEPMock("DDM Hook Load", "", ddm.getElementId());
		SEPMock gearboxTemperature = SEPFactory.generateSEPMock("DDM Gearbox Temperature", "", ddm.getElementId());
		SEPMock ddmSwivelTemperature = SEPFactory.generateSEPMock("DDM Swivel Temperature", "", ddm.getElementId());
		
		SEPMock ibopStatus = SEPFactory.generateSEPMock("IBOP Status", "", ibop.getElementId());
		
		SEPMock ambientTemperature = SEPFactory.generateSEPMock("Ambient Temperature", "", weather.getElementId());
		SEPMock wind = SEPFactory.generateSEPMock("Wind conditions", "", weather.getElementId());
		
		SEPMock weightOnBit = SEPFactory.generateSEPMock("Weight On Bit", "", drillBit.getElementId());
		
		SEPMock battery = SEPFactory.generateSEPMock("Battery level", "", mobilePhone.getElementId());
		SEPMock calendar = SEPFactory.generateSEPMock("Calendar appointment scheduled", "", mobilePhone.getElementId());
		SEPMock location = SEPFactory.generateSEPMock("Location", "current location", mobilePhone.getElementId());
		SEPMock microphone = SEPFactory.generateSEPMock("Microphone", "publishes current sound level", mobilePhone.getElementId());
		SEPMock tweet = SEPFactory.generateSEPMock("Tweet", "", twitter.getElementId());
		SEPMock retweet = SEPFactory.generateSEPMock("Retweet", "", twitter.getElementId());
		
		
		seps.add(speedShaft);
		seps.add(torque);
		seps.add(hookLoad);
		seps.add(gearboxTemperature);
		seps.add(ddmSwivelTemperature);
		seps.add(ibopStatus);
		seps.add(ambientTemperature);
		seps.add(weightOnBit);
		seps.add(battery);
		seps.add(calendar);
		seps.add(location);
		seps.add(microphone);
		seps.add(tweet);
		seps.add(retweet);
		seps.add(wind);
		
		manager.setStoredSEPs(seps);
	
		
		//generate epas
		List<SEPAMock> sepas = new ArrayList<SEPAMock>();
		
		SEPAMock drillingStart = SEPAFactory.generateSEPAMock("Drilling Start", "Detects start of a drilling process");
		SEPAMock drillingStop = SEPAFactory.generateSEPAMock("Drilling Start", "Detects stop of a drilling process");
		SEPAMock coolingDownStart = SEPAFactory.generateSEPAMock("Cooling Down Start", "Detects start of cooling down process");
		SEPAMock coolingDownStop = SEPAFactory.generateSEPAMock("Cooling Down Stop", "Detects stop of a cooling down process");
		SEPAMock suddenIncreaseDecrease = SEPAFactory.generateSEPAMock("Drilling Start", "Detects the start of a drilling process");
		SEPAMock simpleTextFilter = SEPAFactory.generateSEPAMock("Filter", "Filter that operates on textual data");
		SEPAMock proximity = SEPAFactory.generateSEPAMock("Proximity", "Detects proximity between two location-based objects");
		SEPAMock sentiment = SEPAFactory.generateSEPAMock("Sentiment Detection", "estimates sentiment of textual data");
		
		sepas.add(drillingStart);
		sepas.add(drillingStop);
		sepas.add(coolingDownStart);
		sepas.add(coolingDownStop);
		sepas.add(suddenIncreaseDecrease);
		sepas.add(simpleTextFilter);
		sepas.add(proximity);
		sepas.add(sentiment);
		
		manager.setStoredSEPAs(sepas);
	
	}
	
	private static List<Domain> createDomainList(Domain...domains)
	{
		List<Domain> result = new ArrayList<Domain>();
		for(Domain domain : domains)
		{
			result.add(domain);
		}
		return result;
	}

}
