String namespace = "http://sepa.event-processing.org/";

		ValueFactory f = repo.getValueFactory();

		URI eventProducer = f.createURI(namespace, "EventProducer");
		URI eventGrounding = f.createURI(namespace, "EventGrounding");
		URI tcp = f.createURI(namespace, "TCP");
		URI eventSchema = f.createURI(namespace, "EventSchema");
		URI eventProperty = f.createURI(namespace, "EventProperty");
		URI hasName = f.createURI(namespace, "hasName");
		URI produces = f.createURI(namespace, "produces");
		URI eventStream = f.createURI(namespace, "EventStream");
		URI hasSchema = f.createURI(namespace, "hasSchema");
		URI hasProperty = f.createURI(namespace, "hasProperty");
		URI consistsOf = f.createURI(namespace, "consistsOf");
		URI event = f.createURI(namespace, "Event");

		URI myAcc = f.createURI(namespace, "myAccelerometer");
		URI accEvent = f.createURI(namespace, "accEvent");
		URI accStream = f.createURI(namespace, "accStream");
		URI mySchema = f.createURI(namespace, "mySchema");
		URI xProperty = f.createURI(namespace, "xProperty");
		URI yProperty = f.createURI(namespace, "yProperty");
		URI zProperty = f.createURI(namespace, "zProperty"); // URI accEvent =
		f.createURI(namespace, "accEvent");

		URI hasType = f.createURI(namespace, "hasType");
		URI hasUnit = f.createURI(namespace, "hasUnit");

		try {

			conn.add(accStream, RDF.TYPE, eventStream);
			conn.add(accStream, consistsOf, accEvent);
			conn.add(accEvent, RDF.TYPE, event);
			conn.add(accEvent, hasName, f.createLiteral("AccelerationEvent"));
			conn.add(accEvent, hasSchema, mySchema);
			conn.add(mySchema, hasProperty, xProperty);
			conn.add(mySchema, RDF.TYPE, eventSchema);
			conn.add(xProperty, RDF.TYPE, eventProperty);
			conn.add(
					xProperty,
					hasUnit,
					f.createURI("http://purl.oclc.org/NET/muo/muo#accelerationX"));
			conn.add(xProperty, hasName, f.createLiteral("accX"));
			conn.add(xProperty, hasType, XMLSchema.DOUBLE);

			conn.add(yProperty, RDF.TYPE, eventProperty);
			conn.add(
					yProperty,
					hasUnit,
					f.createURI("http://purl.oclc.org/NET/muo/muo#accelerationY"));
			conn.add(yProperty, hasName, f.createLiteral("accY"));
			conn.add(yProperty, hasType, XMLSchema.DOUBLE);

			conn.add(zProperty, RDF.TYPE, eventProperty);
			conn.add(
					zProperty,
					hasUnit,
					f.createURI("http://purl.oclc.org/NET/muo/muo#accelerationZ"));
			conn.add(zProperty, hasName, f.createLiteral("accZ"));
			conn.add(zProperty, hasType, XMLSchema.DOUBLE);

			RepositoryResult<Statement> statements = conn.getStatements(null,
					null, null, true);
			Model model = Iterations.addAll(statements, new LinkedHashModel());
			model.setNamespace("rdf", RDF.NAMESPACE);
			model.setNamespace("rdfs", RDFS.NAMESPACE);
			model.setNamespace("xsd", XMLSchema.NAMESPACE);
			model.setNamespace("foaf", FOAF.NAMESPACE);
			model.setNamespace("ex", namespace);

			Rio.write(model, System.out, RDFFormat.RDFXML);

			EventPropertyUnit unit = new EventPropertyUnit();