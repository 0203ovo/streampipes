/*
 * Copyright 2018 FZI Forschungszentrum Informatik
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package org.streampipes.connect.management;

import org.streampipes.connect.RunningAdapterInstances;
import org.streampipes.connect.config.ConnectContainerConfig;
import org.streampipes.connect.adapter.Adapter;
import org.streampipes.connect.exception.AdapterException;
import org.streampipes.model.SpDataSet;
import org.streampipes.model.connect.adapter.AdapterDescription;
import org.streampipes.model.connect.adapter.AdapterSetDescription;
import org.streampipes.model.connect.adapter.AdapterStreamDescription;

public class AdapterWorkerManagement implements IAdapterWorkerManagement {

    public void invokeStreamAdapter(AdapterStreamDescription adapterStreamDescription) throws AdapterException {

        String brokerUrl = ConnectContainerConfig.INSTANCE.getKafkaUrl();
        String topic = getTopicPrefix() + adapterStreamDescription.getName();

//        Adapter adapter = new Adapter(brokerUrl, topic, false);
//        RunningAdapterInstances.INSTANCE.addAdapter(adapterStreamDescription.getUri(), adapter);
//        adapter.startAdapter(adapterStreamDescription);
    }

    public void stopStreamAdapter(AdapterStreamDescription adapterStreamDescription) throws AdapterException {
//        stopAdapter(adapterStreamDescription);

    }

    public void invokeSetAdapter (AdapterSetDescription adapterSetDescription) throws AdapterException {
        SpDataSet dataSet = adapterSetDescription.getDataSet();

//        String brokerUrl = dataSet.getBrokerHostname() + ":9092";
//        String topic = dataSet.getActualTopicName();
//        Adapter adapter = new Adapter(brokerUrl, topic, false);
//
//        RunningAdapterInstances.INSTANCE.addAdapter(dataSet.getDatasetInvocationId(), adapter);


//        Runnable r = () -> {
//            adapter.startAdapter(adapterSetDescription);
//
//             TODO wait till all components are done with their calculations
//            try {
//                Thread.sleep(5000);
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//            String url = AdapterUtils.getUrl(ConnectContainerConfig.INSTANCE.getBackendApiUrl(), dataSet.getCorrespondingPipeline());
//            String result = AdapterUtils.stopPipeline(url);
//
//            System.out.println(result);
//
//        };
//
//        new Thread(r).start();
    }

    public void stopSetAdapter (AdapterSetDescription adapterSetDescription) throws AdapterException {
//        stopAdapter(adapterSetDescription);
    }

    private void stopAdapter(AdapterDescription adapterDescription) throws Exception{

        String adapterUri = adapterDescription.getUri();

        Adapter adapter = RunningAdapterInstances.INSTANCE.removeAdapter(adapterUri);

        if (adapter == null) {
            throw new Exception("Adapter with id " + adapterUri + " was not found in this container and cannot be stopped.");
        }

        adapter.stopAdapter();
    }

    private String getTopicPrefix() {
        return "org.streampipes.autogenerated.adapters.";
    }

}
