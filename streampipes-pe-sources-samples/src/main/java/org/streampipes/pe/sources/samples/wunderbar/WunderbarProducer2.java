package org.streampipes.pe.sources.samples.wunderbar;

import java.util.ArrayList;
import java.util.List;

import org.streampipes.container.declarer.DataStreamDeclarer;
import org.streampipes.container.declarer.SemanticEventProducerDeclarer;
import org.streampipes.model.graph.DataSourceDescription;

public class WunderbarProducer2 implements SemanticEventProducerDeclarer {
	
	@Override
	public DataSourceDescription declareModel() {
		DataSourceDescription sep = new DataSourceDescription("source-wunderbar2", "Wunderbar Sensor Bar (2)", "Provides streams generated by Wunderbar IoT sensors (Wunderbar 2)");
		
		return sep;
	}

	@Override
	public List<DataStreamDeclarer> getEventStreams() {
		List<DataStreamDeclarer> streams = new ArrayList<>();
		streams.add(new AccelerometerStream(WunderbarVariables.ACCELEROMETER_2));
		streams.add(new AngularSpeedStream(WunderbarVariables.ANGULAR_SPEED_2));
		streams.add(new ColorStream(WunderbarVariables.COLOR_2));
		streams.add(new HumidityStream(WunderbarVariables.HUMIDITY_2));
		streams.add(new LuminosityStream(WunderbarVariables.LUMINOSITY_2));
		streams.add(new NoiseLevelStream(WunderbarVariables.NOISE_LEVEL_2));
		streams.add(new ProximityStream(WunderbarVariables.PROXIMITY_2));
		streams.add(new TemperatureStream(WunderbarVariables.TEMPERATURE_2));
		return streams;
	}

}
