package de.fzi.cep.sepa.flink.test.project;

import de.fzi.cep.sepa.flink.AbstractFlinkConsumerDeclarer;
import de.fzi.cep.sepa.flink.FlinkDeploymentConfig;
import de.fzi.cep.sepa.flink.FlinkSecRuntime;
import de.fzi.cep.sepa.model.builder.SchemaBuilder;
import de.fzi.cep.sepa.model.builder.StreamBuilder;
import de.fzi.cep.sepa.model.impl.EventStream;
import de.fzi.cep.sepa.model.impl.eventproperty.EventProperty;
import de.fzi.cep.sepa.model.impl.graph.SecDescription;
import de.fzi.cep.sepa.model.impl.graph.SecInvocation;
import de.fzi.cep.sepa.client.util.StandardTransportFormat;
import java.lang.Override;
import java.util.ArrayList;
import java.util.List;

public class TestProjectController extends AbstractFlinkConsumerDeclarer {
  @Override
  public SecDescription declareModel() {
    SecDescription desc = new SecDescription("sepa/testProject", "TestProject", "Example description");
    List<EventProperty> eventProperties0 = new ArrayList<EventProperty>();
    EventStream stream0 = StreamBuilder.createStream(null, null, "localhost:8080/sepa/testProject").schema(SchemaBuilder.create().properties(eventProperties0).build()).build();
    desc.addEventStream(stream0);
    desc.setSupportedGrounding(StandardTransportFormat.getSupportedGrounding());
    return desc;
  }

  @Override
  public boolean isVisualizable() {
    return false;
  }

  @Override
  public String getHtml(SecInvocation graph) {
    return null;
  }

  @Override
  protected FlinkSecRuntime getRuntime(SecInvocation graph) {
    return new TestProjectProgram(graph, new FlinkDeploymentConfig(Config.JAR_FILE, Config.FLINK_HOST, Config.FLINK_PORT));
  }
}
